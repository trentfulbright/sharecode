//ï¿½ A+ Computer Science  -  www.apluscompsci.com
//Name -  
//Date -
//Class - 
//Lab  -

import static java.lang.System.*;
import java.util.LinkedList;

/*I'd just like to interject for moment. What you're referring to as Linux, is in fact, GNU/Linux, or as I've recently taken to calling it, GNU plus Linux. Linux is not an operating system unto itself, but rather another free component of a fully functioning GNU system made useful by the GNU corelibs, shell utilities and vital system components comprising a full OS as defined by POSIX.

Many computer users run a modified version of the GNU system every day, without realizing it. Through a peculiar turn of events, the version of GNU which is widely used today is often called Linux, and many of its users are not aware that it is basically the GNU system, developed by the GNU Project.

There really is a Linux, and these people are using it, but it is just a part of the system they use. Linux is the kernel: the program in the system that allocates the machine's resources to the other programs that you run. The kernel is an essential part of an operating system, but useless by itself; it can only function in the context of a complete operating system. Linux is normally used in combination with the GNU operating system: the whole system is basically GNU with Linux added, or GNU/Linux. All the so-called Linux distributions are really distributions of GNU/Linux!*/

public class BinarySearchTree
{
	private TreeNode root;
	int NodeCount;

	public BinarySearchTree()
	{
		root = null;
	}

	public void add(Comparable val)
	{
		root = add(val, root);
	}

	private TreeNode add(Comparable val, TreeNode tree)
	{
		NodeCount++;
	   if(tree == null)
			tree = new TreeNode(val);
		
		Comparable treeValue = tree.getValue();
		int dirTest = val.compareTo(treeValue);
		
		if(dirTest < 0)
			tree.setLeft(add(val, tree.getLeft()));
		else if(dirTest > 0)
			tree.setRight(add(val, tree.getRight()));
		
		return tree;
	}

   public void inOrder()
	{
		inOrder(root);
		System.out.println("\n");
	}

	private void inOrder(TreeNode tree)
	{
		if (tree != null){
			inOrder(tree.getLeft());
			System.out.print(tree.getValue() + " ");
			inOrder(tree.getRight());
		}
	}



	// preOrder
	private void preOrder(TreeNode tree){
		if(tree != null){
			System.out.print(tree.getValue() + " ");
			preOrder(tree.getLeft());
			preOrder(tree.getRight());
		}
	}
	
	// postOrder
	private void postOrder(TreeNode tree){
		if(tree != null){
			postOrder(tree.getLeft());
			postOrder(tree.getRight());
			System.out.print(tree.getValue() + " ");
		}
	}
	
	// revOrder
	private void revOrder(TreeNode tree){
		if(tree != null){
			revOrder(tree.getRight());
			System.out.print(tree.getValue() + " ");
			revOrder(tree.getLeft());
		}
	}
	
	// levelOrder - use a queue
	private void levelOrder(TreeNode tree){
		for(int i = 1; i<getHeight(tree); i++){
			printCurrentLevel(tree, i);
		}
	}
	private void printCurrentLevel(TreeNode tree, int level){
		if (tree == null)
			return;
		if (level == 1)
			System.out.print(tree.getValue() + " ");
		else if (level > 1) {
			printCurrentLevel(tree.getLeft(), level - 1);
			printCurrentLevel(tree.getRight(), level - 1);
		}

	}


	
	// zigzagOrder - hint below but could be solved in a different manner
	// loop thru a stack and load all nodes to a new stack(loading is based on direction)
	// set new stack to old and repeat



	// getNumLevels do before height

	public int getNumLevels(TreeNode tree){
		if(tree == null){
			return 0;
		}
		else{
			int numLeft = getNumLevels(tree.getLeft());
			int numRight = getNumLevels(tree.getRight());
			if(numLeft > numRight){
				return 1 + numLeft;
			}
			else{
				return 1 + numRight;
			}
		}

	}

	// getNumLeaves

	
	// getWidth - insure this works right for the 2nd test case
	public int getWidth(TreeNode tree){
		



	}

	// getHeight
	public int getHeight(TreeNode tree){
		return getNumLevels(tree) - 1;
	}
	
	// getNumNodes
	public int getNumNodes(TreeNode tree){
		return NodeCount;
	}


	
	// isFull
		
	// contains
	public Boolean contains(Comparable s){
		TreeNode cur = root;
		while(cur != null){
			if(cur.getValue().compareTo(s)==0){
				return true;
			}
			if(cur.getValue().compareTo(s)<0){
				cur = cur.getLeft();
			}
			else if(cur.getValue().compareTo(s)>0){
				cur = cur.getRight();
			}
		}
		return false;
	}


	// getSmallest
	public TreeNode getSmallest(TreeNode node){
		TreeNode newnode = node;
		while(newnode.getLeft() != null) {
			newnode = newnode.getLeft();
		}
		return newnode;
	}
	// getLargest
	public TreeNode getLargest(TreeNode node){
		TreeNode newnode = node;
		while(newnode.getRight() != null) {
			newnode = newnode.getRight();
		}
		return newnode;
	}
	
	// remove - follow adds set up very closely and check powerpoint if needed
	// 1st case = no children
	// 2nd case = one child
	// 3rd case two children
	public void remove(Comparable val, TreeNode tree){
		NodeCount--;


	}
	
	// ****BONUS**** 
	// display like a tree


	public String toString()
	{
		return "";
	}

	private String toString(TreeNode tree)
	{
		return "";
	}
}
