import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

public class Toposort {
    

    static ArrayList<Integer> toposort(ArrayList<Integer>[] adj) {
        int visited[] = new int[adj.length];
        ArrayList<Integer> order = new ArrayList<>();
        for (int v = 0; v < adj.length; v++){
            if(visited[v] == 0)
                DFS(adj, visited, order, v);
        }
        Collections.reverse(order);
        return order;
    }
    
    static void DFS(ArrayList<Integer>[] adj, int[] visited, ArrayList<Integer> order, int s){
        visited[s] = 1;
        adj[s].stream().filter((t) -> (visited[t] == 0)).forEachOrdered((t) -> {
            DFS(adj, visited, order, t);
        });
        order.add(s);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        ArrayList<Integer> order = toposort(adj);
        for (int x : order) {
            System.out.print((x + 1) + " ");
        }
    }
}




import java.util.ArrayList;
import java.util.Scanner;
import java.util.Stack;

public class StronglyConnected {
    static int numberOfStronglyConnectedComponents(ArrayList<Integer>[] adj) {
        ArrayList<Integer>[] temp = new ArrayList[adj.length];
        for(int i = 0; i<adj.length; i++){
            temp[i] = new ArrayList<>();
        }
        for(int i = 0; i<adj.length; i++){
            for(int j : adj[i]){
                temp[j].add(i);
            }
        }
        ArrayList<Integer>[] adja = temp;
        Stack<Integer> stack = new Stack<>();
        boolean[] visited = new boolean[adj.length];
        for (int i = 0; i < adj.length; i++) {
            if (! visited[i]) dfs(adja, i, visited, stack);
        }
        int r = 0;
        visited = new boolean[adj.length];
        while (!stack.isEmpty()) {
            int cur = stack.pop();
            if (visited[cur]) continue;
            dfs(adj, cur, visited, null);
            r++;
        }
        return r;
    }
    
    
    
    static void dfs(ArrayList<Integer>[] adj, int x, boolean[] visited, Stack<Integer> stack) {
        visited[x] = true;
        adj[x].forEach((w) -> {
            if(!visited[w]) {
                dfs(adj, w, visited, stack);
            } else {
            }
        });
        if (stack != null) stack.push(x);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        System.out.println(numberOfStronglyConnectedComponents(adj));
    }
}



import java.util.ArrayList;
import java.util.Scanner;

public class Acyclicity {
    public static int acyclic(ArrayList<Integer>[] adj) {
        int n = adj.length;
        boolean[] visited = new boolean[n];
        boolean[] stack = new boolean[n];
        for(int v = 0; v < n; v++) {
            if(! visited[v]) {
                if(dfs(v, adj, visited, stack) == 1) return 1;
            }
        }
        return 0;
    }
    
    private static int dfs(int vertex, ArrayList<Integer>[] adj, boolean[] visited, boolean[] stack) {
        visited[vertex] = true;
        stack[vertex] = true;
        for(int i : adj[vertex]){
            if(!visited[i]) {
                if(dfs(i, adj, visited, stack) == 1){
                    return 1;
                }
            }
            if(visited[i] && stack[i]) return 1;
        }
        stack[vertex] = false;
        return 0;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        int m = scanner.nextInt();
        ArrayList<Integer>[] adj = (ArrayList<Integer>[])new ArrayList[n];
        for (int i = 0; i < n; i++) {
            adj[i] = new ArrayList<Integer>();
        }
        for (int i = 0; i < m; i++) {
            int x, y;
            x = scanner.nextInt();
            y = scanner.nextInt();
            adj[x - 1].add(y - 1);
        }
        System.out.println(acyclic(adj));
    }
}



import static org.junit.Assert.assertEquals;
import org.junit.Test;

import java.io.File;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;

public class AcyclicTest{

    ArrayList<Integer>[] adj;

    void loadFile(String name) {
        try {
            Scanner scanner = new Scanner(new File(name));
            int n = scanner.nextInt();
            int m = scanner.nextInt();
            adj = (ArrayList<Integer>[]) new ArrayList[n];
            for (int i = 0; i < n; i++) {
                adj[i] = new ArrayList<>();
            }
            for (int i = 0; i < m; i++) {
                int x, y;
                x = scanner.nextInt();
                y = scanner.nextInt();
                adj[x-1].add(y-1);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(ReachabilityTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    @Test
    public void testOne() {
        loadFile("acyclicOne.txt");
        assertEquals(1, Acyclicity.acyclic(adj));
    }

    @Test
    public void testTwo() {
        loadFile("acyclicTwo.txt");
        assertEquals(0, Acyclicity.acyclic(adj));
    }
}
