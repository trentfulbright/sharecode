import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author s820702
 */
public class HangmanManager {
    List<String> originalDictionary;
    int length;
    int max;
    Set<String> culledDictionary;
    Set<String> guesses = new TreeSet<String>();
    int guessNumber;
    String pattern;
    final char[] templatePattern;
    Set<String> words;

    public HangmanManager(List<String> dictionary2, int length, int max) {
        guessNumber = 0;
        this.length = length;
        this.max = max;
        char[] chars = new char[max];
        Arrays.fill(chars, '-');
        pattern = new String(chars);
        templatePattern = chars;
        words = new TreeSet<>();
         for(String s : dictionary2) {
        if(s.length() == length) 
            words.add(s);
            
   }
        
    }

    public Set<String> words() {
        return words;
    }

    int guessesLeft() {
        return max - guessNumber;
    }

    String pattern() {
       return pattern;
    }

    Set<String> guesses() {
        return guesses;
    }

    int record(char ch) {
        String charString = String.valueOf(ch);
        guesses.add(charString);
        guessNumber++;
        Map temp = new TreeMap<String, Set<String>>();
        for(int i = 0; i<originalDictionary.size(); i++){
            if(!temp.containsKey(getPattern(originalDictionary.get(i), ch))){
                Set<String> set = new TreeSet<>();
                set.add(originalDictionary.get(i));
                temp.put(getPattern(originalDictionary.get(i), ch), set);                               
            }
            else{
                
                Set<String> set = (TreeSet<String>) temp.get(getPattern(originalDictionary.get(i), ch));
                set.add(originalDictionary.get(i));
                temp.put(getPattern(originalDictionary.get(i), ch), set);
            }
        }
        Set<String> currentSet = (Set<String>) temp.get(getPattern(originalDictionary.get(1), ch));
        words = findSet(temp, ch);
        return occurances(findPattern(temp, ch));
 
        
    }
    public void changePattern(String pattern){
        char[] temp = this.pattern.toCharArray();
        char[] temp2 = pattern.toCharArray();
        for(int i = 0; i<temp.length; i++){
            if(Character.compare(temp[i], '-') != 0){
                temp[i] = temp2[i];
            }
        }
        this.pattern = new String(temp);
    }
    public int occurances(String pattern){
        int count = 0;
        char[] temp = pattern.toCharArray();
        for(int i = 0; i<temp.length; i++){
            if(Character.compare(temp[i], '-') != 0){
                count++;
            }
        }
        return count;
    }
    
    private Set<String> findSet(Map<String, Set<String>> map, char ch){
        Set<String> currentSet = (Set<String>) map.get(getPattern(originalDictionary.get(1), ch));
        for(String s : map.keySet()){
            if(map.get(s).size() > currentSet.size()){
                currentSet = map.get(s);
            }
        }
        return currentSet;
    }
    private String findPattern(Map<String, Set<String>> map, char ch){
        Set<String> currentSet = (Set<String>) map.get(getPattern(originalDictionary.get(1), ch));
        String tempKey = "";
        for(String s : map.keySet()){
            if(map.get(s).size() > currentSet.size()){
                currentSet = map.get(s);
                tempKey = s;
            }
        }
        return tempKey;
        
    }
    String getPattern(String cur, char c){
        char[] temp = templatePattern;
        for(int i = 0; i<cur.length(); i++){
            if(Character.compare(cur.charAt(i), c)== 0 ){
                temp[i] = c;
            }
        }
        return new String(temp);
    }

    

    
    
}
