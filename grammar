
import java.util.ArrayList;
import java.util.List;
import java.util.Random;
import java.util.TreeMap;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author trent
 */
public class Grammar {
    private TreeMap<String, ArrayList<String>> rules = new TreeMap<>();

    public Grammar(List<String> bnf) {
        if(bnf == null || bnf.isEmpty()){
            throw new IllegalArgumentException("bruh");
        }
        for(String s : bnf){
            String[] temp = s.split("::=");
            if(rules.containsKey(temp[0])){
                ArrayList<String> ary = rules.get(temp[0]);
                String[] temp2 = temp[1].split("\\|");
                for(int i = 0; i<temp2.length; i++){
                    ary.add(temp2[i]);
                }
                rules.put(temp[0], ary);
            }
            else{
                String[] temp2 = temp[1].split("\\|");
                ArrayList<String> ary = new ArrayList<>();
                for(int i = 0; i<temp2.length; i++){
                    ary.add(temp2[i]);
                }
                rules.put(temp[0], ary);
            }
        }
        
        
    }

    boolean isNonTerminal(String symbol) {
        for(String s : rules.keySet()){
            if(symbol.compareTo(s) == 0){
                return true;
            }
        }
        return false;
    }

    public List<String> getRandom(int number, String nonTerminal) {
        if(number<0 | isNonTerminal(nonTerminal) == false){
            throw new IllegalArgumentException("bruh");
        }
        List<String> temp = new ArrayList<String>();
        for(int i = 0; i<number; i++){
            temp.add(getRandom(nonTerminal));
        }
        return temp;
        
    }
    public String getRandom(String nonTerminal) {
        if(nonTerminal == null | isNonTerminal(nonTerminal) == false){
            throw new IllegalArgumentException("bruh");
        }
        

        int option = getRandomNumberInRange(0, rules.get(nonTerminal).size()-1);
        //System.out.print(option);
        String[] temp = rules.get(nonTerminal).get(option).split(" ");
        String sum = "";
        for(int i = 0; i<temp.length; i++){
            if(isNonTerminal(temp[i]) == false){
                if(sum.contains(" " + temp[i]) ==  false){
                    sum += " " + temp[i];
                }
                
            }
            else{
                String str = getRandom(temp[i]);
                if(sum.contains(" " + str) == false){
                   sum += " " + str;
                }
            }
            
        }
        sum = sum.trim();
        return sum;
        
    }
    
    public String toString(){
        List<String> temp = new ArrayList<>();
        for(String s : rules.keySet()){
            temp.add(s);
        }
        temp.sort(String::compareToIgnoreCase);
        String str = "";
        for(String s : temp){
            str += " " + s;
        }
        str = str.trim();
        return str;
    }
    private static int getRandomNumberInRange(int min, int max) {


		Random r = new Random();
		return r.nextInt((max - min) + 1) + min;
	}


    
    
    
}
