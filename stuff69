import edu.princeton.cs.algs4.WeightedQuickUnionUF;

public class Percolation {
    private WeightedQuickUnionUF uf;
    Boolean[][] matrix;

	
	
   public Percolation(int n)                // create n-by-n grid, with all sites blocked
   {
   	matrix = new Boolean[n][n];
   	
   	
   }
   public void open(int row, int col)       // open site (row, col) if it is not open already
   {
       if(row > matrix.length || col > matrix.length){
           throw new IndexOutOfBoundsException("lol");
       }
   		matrix[row][col] = true;
   }
   private int getID(int r, int c){			// helper method to calculate ID
   	
   }
   
   public boolean isOpen(int row, int col)  // is site (row, col) open?
   {
       if(row > matrix.length || col > matrix.length){
           throw new IndexOutOfBoundsException("lol");
       }
    return matrix[row][col] == true;
   }



   public boolean isFull(int row, int col)  // is site (row, col) full?
   {
   	
   	
   }
   private void checkRange(int row, int col){	// validate input
   		
   		
   }
   public boolean percolates()              // does the system percolate?
   {
   	
   	
   }
   private void print(){				   // prints boolean[][] called mat
   	/*for(boolean[] row: mat){
   		for(boolean col: row){
   			System.out.print((col ? 1: 0) + " ");
   		}
   		System.out.println();
   	}
   	System.out.println();
   }*/
   public static void main(String[] args)   // test client (optional){
   {
   		Percolation test = new Percolation(2);	// simple test case
   		test.print();
   		test.open(1,1);
   		test.print();
   		test.open(2,1);
   		test.print();
   		System.out.println(test.percolates());
   }
}
